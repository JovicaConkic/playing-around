{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","monster","className","alt","name","src","id","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","props","e","setState","searchField","target","value","state","fetch","then","response","json","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAMaA,G,MAAiD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC/D,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAKF,EAAQG,KACbC,IAAG,+BAA0BJ,EAAQK,GAAlC,4BAEL,gCAAML,EAAQG,KAAd,KACA,+BAAKH,EAAQM,MAAb,QCHOC,G,MAA6C,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3D,OACE,yBAAKP,UAAU,aACZO,EAASC,KAAI,SAACT,GAAD,OACZ,kBAAC,EAAD,CAAMU,IAAKV,EAAQK,GAAIL,QAASA,UCN3BW,G,MAA+C,SAAC,GAAD,IAC1DC,EAD0D,EAC1DA,YACAC,EAF0D,EAE1DA,aAF0D,OAI1D,2BACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgCCG,G,kBApCb,WAAYC,GAAgB,IAAD,8BACzB,4CAAMA,KAcRJ,aAAe,SAACK,GAAD,OACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IALU,E,iFASA,IAAD,OACxBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAwBA,EAASC,UACtCF,MAAK,SAACjB,GAAD,OAA0B,EAAKW,SAAS,CAAEX,kB,+BAM1C,IAAD,EAC2BoB,KAAKL,MAA/Bf,EADD,EACCA,SAAUY,EADX,EACWA,YACZS,EAA+BrB,EAASsB,QAAO,SAAC9B,GAAD,OACnDA,EAAQG,KAAK4B,cAAcC,SAASZ,EAAYW,kBAElD,OACE,yBAAK9B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUL,SAAUqB,S,GA/BVI,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.6ea9551b.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\r\n\r\nimport { IMonster } from \"../../interfaces/monster/monster.interface\";\r\n\r\nimport \"./card.component.css\";\r\n\r\nexport const Card: FunctionComponent<{ monster: IMonster }> = ({ monster }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt={monster.name}\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h1> {monster.name} </h1>\r\n      <p> {monster.email} </p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nimport { Card } from \"../card/card.component\";\r\nimport { IMonster } from \"../../interfaces/monster/monster.interface\";\r\n\r\nimport \"./card-list.component.css\";\r\n\r\ntype CardListProps = {\r\n  monsters: IMonster[];\r\n};\r\n\r\nexport const CardList: FunctionComponent<CardListProps> = ({ monsters }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.map((monster: IMonster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { ChangeEvent, FunctionComponent } from \"react\";\r\n\r\nimport \"./search-box.component.css\";\r\n\r\ntype SearchBoxProps = {\r\n  placeholder: string;\r\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nexport const SearchBox: FunctionComponent<SearchBoxProps> = ({\r\n  placeholder,\r\n  handleChange\r\n}) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\n\nimport { IMonster } from \"./interfaces/monster/monster.interface\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nimport \"./App.css\";\n\ntype IProps = {};\ntype IState = { monsters: IMonster[]; searchField: string };\n\nclass App extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount(): void {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response: Response) => response.json())\n      .then((monsters: IMonster[]) => this.setState({ monsters }));\n  }\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>): void =>\n    this.setState({ searchField: e.target.value });\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters: IMonster[] = monsters.filter((monster: IMonster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}